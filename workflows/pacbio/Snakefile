from os.path import join
from samples import Samples

"""
################################################################################
Author: https://github.com/nahanoo
This is the snakemake file for processing the pacbio samples. The assemblies
were created by someone else and directly integrated into the workflow.
The corrected reads outputted form canu are aligned to the wild-type genomes.
Then deletions and insertions are identified using
https://github.com/nahanoo/deletion_detection.
################################################################################
"""

work = '/work/FAC/FBM/DMF/smitri/evomicrocomm/genome_size/data/'

def get_strain(wildcards):
    """Returns the full strain name"""
    for strain,samples in Samples().strains.items():
        for sample in samples:
            if sample['name'] == wildcards.sample:
                return strain

def get_strain_abbreviation(wildcards):
    """Returns the full strain name"""
    for strain,samples in Samples().strains.items():
        for sample in samples:
            if sample['name'] == wildcards.sample:
                return Samples().abbreviations[strain]


def get_genbank(wildcards):
    """Returns genbank based on sample name"""
    for strain,samples in Samples().strains.items():
        for sample in samples:
            if sample['name'] == wildcards.sample:
                return join(work,Samples().abbreviations[strain],'reference_stripped.gbk')

def get_reference(wildcards):
    """Returns reference fasta based on sample name"""
    for strain,samples in Samples().strains.items():
        for sample in samples:
            if sample['name'] == wildcards.sample:
                return join(work,Samples().abbreviations[strain],'reference.fasta')


#Aligning corrected reads to wild-type genome
rule mapping_corrected_reads:
    input:
        reference = join(work,'{sample}','reference.fasta'),
        corrected_reads = join(work,'{sample}','corrected_reads.fasta')
    output:
        join(work,'{sample}','mapped_corrected_reads.sorted.bam')
    threads:
        16
    shell:
        """
        minimap2 --secondary=no -t 16 -ax map-pb {input} | samtools sort --threads 16 -o {output}
        samtools index {output}
        """


rule bakta:
    input:
        join(work,'{sample}','assembly.fasta')
    output:
        join(work,'{sample}','bakta','assembly.gbff')
    params:
        join(work,'{sample}','bakta')
    threads:
        16
    shell:
        """bakta --db ~/work/bakta/db/ --keep-contig-headers --threads {threads} {input} --output {params}
        """
        
rule deletion_detection:
    input:
        mutant = join(work,'{sample}','assembly.fasta'),
        reference = get_genbank
    output:
        join(work,'{sample}','deletions.annotated.tsv'),
        join(work,'{sample}','plasmids.annotated.tsv')
    params:
        join(work,'{sample}'),

    threads:
        16
    shell:
        "detect_deletions {input} {params}"


#Areas with no coverage are identified which are insertions (sequence present
#in evolded strain but not in wild-type)
rule insertion_detection:
    input:
        gbk = join(work,'{sample}','bakta','assembly.gbff'),
        reference = get_reference
    output:
        join(work,'{sample}','insertions.tsv'),
        join(work,'{sample}','insertions.annotated.tsv')
    params:
        join(work,'{sample}'),

    threads:
        16
    shell:
        "detect_insertions {input} {params}"

rule hgt_detection:
    input:
        mutant = join(work,'{sample}','bakta','assembly.gbff'),
        ancestor = get_reference,
        references = join(work,'references')
    output:
        join(work,'{sample}','hgts.annotated.tsv'),
    params:
        out_dir = join(work,'{sample}')
    threads:
        16
    shell:
        "detect_hgts {input} {params}"

rule ise_scan:
    input:
        mutant = join(work,'{sample}','assembly.fasta')
    output:
        join(work,'{sample}','ise_scan','assembly.fasta.tsv')
    params:
        out_dir = join(work,'{sample}','ise_scan')
    threads:
        16
    shell:
        "isescan.py --seqfile {input} --output {params} --nthread {threads}"

#We also creat a report for the alignment file given us interesting stats
#For the report we need to store the labels of the plots as json
rule labels:
    output:
        join(work,'{sample}','labels.json')
    params:
        outdir = join(work,'{sample}'),
        strain = get_strain
    threads:
        1
    shell:
        """
        echo {params.strain}
        python create_labels.py {wildcards.sample} {params.strain} {params.outdir}
        """

#Creating report using https://github.com/nahanoo/gc_bias/tree/main/gc_bias
rule report:
    input:
        labels = join(work,'{sample}','labels.json'),
        reference = join(work,'{sample}','reference.fasta'),
        bam = join(work,'{sample}','mapped_corrected_reads.sorted.bam')
    output:
        join(work,'{sample}','report.md')
    params:
        outdir = join(work,'{sample}')
    threads:
        16
    shell:
        "report_bam_stats {input.reference} {input.bam} {input.labels} {params.outdir}"

#Because the assemblies were done by someone else, I also quickly assembled
#them withi miniams. Similar results, thus I'm sticking with previously made assemblies.
#Overlapping reads for miniasm
rule overlapping_corrected_reads:
    input:
        join(work,'{sample}','corrected_reads.fasta'),
    output:
        join(work,'{sample}','overlapped_corrected_reads.paf')
    threads:
        16
    shell:
        "minimap2 -x ava-pb -t {threads} {input} {input} > {output}"

#Running miniasm on overlapped reads
rule miniasm:
    input:
        reads = join(work,'{sample}','corrected_reads.fasta'),
        overlap = join(work,'{sample}','overlapped_corrected_reads.paf')
    output:
        gfa = join(work,'{sample}','assembly.miniasm.gfa'),
        fasta = join(work,'{sample}','assembly.miniasm.fasta')
    threads:
        16
    shell:
        """miniasm -f {input} > {output.gfa}
        awk '/^S/{{print ">"$2"\\n"$3}}' {output.gfa} > {output.fasta}
        """